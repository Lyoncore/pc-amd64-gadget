set default=0
set timeout=3

insmod part_gpt
insmod ext2

if [ -s $prefix/grubenv ]; then
  load_env
fi

if [ "$snap_mode" = "try" ]; then
    # a new core or kernel got installed
    set snap_mode="trying"
    save_env snap_mode

    if [ x"$snap_try_core" != x"" ]; then
        set snap_core="$snap_try_core"
    fi
    if [ x"$snap_try_kernel" != x"" ]; then
        set snap_kernel="$snap_try_kernel"
    fi
elif [ "$snap_mode" = "trying" ]; then
    # nothing cleared the "trying snap" so the boot failed
    # we clear the mode and boot normally
    set snap_mode=""
    save_env snap_mode
fi

set label="writable"
set cmdline="root=LABEL=$label snap_core=$snap_core snap_kernel=$snap_kernel ro net.ifnames=0 init=/lib/systemd/systemd console=ttyS0 console=tty1 panic=-1"

function boot_to_recovery {
    # load recovery system
    echo "[grub.cfg] load factory_restore system"
    search --no-floppy --set --label "$recovery_label"
    echo "[grub.cfg] root: ${root}"
    set snap_core=$recovery_core
    set snap_kernel=$recovery_kernel
    set cmdline="$cmdline recovery=$recovery_label recoverytype=$recovery_type"
    echo "[grub.cfg] loading kernel..."
    linuxefi ($root)/$recovery_kernel/kernel.img $cmdline
    echo "[grub.cfg] loading initrd..."
    initrdefi ($root)/$recovery_kernel/initrd.img
    echo "[grub.cfg] boot..."
    boot
}

menuentry "Ubuntu Core 16" {
    search --label $label --set=writable
    if [ -s (${writable})/system-data/var/lib/snapd/snaps/$snap_kernel -a -s (${writable})/system-data/var/lib/snapd/snaps/$snap_core ]; then
        loopback loop ($writable)/system-data/var/lib/snapd/snaps/$snap_kernel
        linuxefi (loop)/kernel.img $cmdline
        initrdefi (loop)/initrd.img
    else
        # Boot to recovery partition if kernel and core snaps gone
        echo "[grub.cfg] deteted kernel or core snap broken"
        boot_to_recovery
    fi
}
